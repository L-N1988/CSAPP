!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Accept	csapp.c	/^int Accept(int s, struct sockaddr *addr, socklen_t *addrlen) $/;"	f
Alarm	csapp.c	/^unsigned int Alarm(unsigned int seconds) {$/;"	f
BG	tsh.c	28;"	d	file:
Bind	csapp.c	/^void Bind(int sockfd, struct sockaddr *my_addr, int addrlen) $/;"	f
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -O2 -g$/;"	m
Calloc	csapp.c	/^void *Calloc(size_t nmemb, size_t size) $/;"	f
Close	csapp.c	/^void Close(int fd) $/;"	f
Closedir	csapp.c	/^int Closedir(DIR *dirp) $/;"	f
Connect	csapp.c	/^void Connect(int sockfd, struct sockaddr *serv_addr, int addrlen) $/;"	f
DEF_MODE	csapp.h	34;"	d
DEF_UMASK	csapp.h	35;"	d
DRIVER	Makefile	/^DRIVER = .\/sdriver.pl$/;"	m
Dup2	csapp.c	/^int Dup2(int fd1, int fd2) $/;"	f
Execve	csapp.c	/^void Execve(const char *filename, char *const argv[], char *const envp[]) $/;"	f
FG	tsh.c	27;"	d	file:
FILES	Makefile	/^FILES = $(TSH) .\/myspin .\/mysplit .\/mystop .\/myint$/;"	m
Fclose	csapp.c	/^void Fclose(FILE *fp) $/;"	f
Fdopen	csapp.c	/^FILE *Fdopen(int fd, const char *type) $/;"	f
Fgets	csapp.c	/^char *Fgets(char *ptr, int n, FILE *stream) $/;"	f
Fopen	csapp.c	/^FILE *Fopen(const char *filename, const char *mode) $/;"	f
Fork	csapp.c	/^pid_t Fork(void) $/;"	f
Fputs	csapp.c	/^void Fputs(const char *ptr, FILE *stream) $/;"	f
Fread	csapp.c	/^size_t Fread(void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
Free	csapp.c	/^void Free(void *ptr) $/;"	f
Freeaddrinfo	csapp.c	/^void Freeaddrinfo(struct addrinfo *res)$/;"	f
Fstat	csapp.c	/^void Fstat(int fd, struct stat *buf) $/;"	f
Fwrite	csapp.c	/^void Fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream) $/;"	f
Getaddrinfo	csapp.c	/^void Getaddrinfo(const char *node, const char *service, $/;"	f
Gethostbyaddr	csapp.c	/^struct hostent *Gethostbyaddr(const char *addr, int len, int type) $/;"	f
Gethostbyname	csapp.c	/^struct hostent *Gethostbyname(const char *name) $/;"	f
Getnameinfo	csapp.c	/^void Getnameinfo(const struct sockaddr *sa, socklen_t salen, char *host, $/;"	f
Getpgrp	csapp.c	/^pid_t Getpgrp(void) {$/;"	f
HANDINDIR	Makefile	/^HANDINDIR = \/afs\/cs\/academic\/class\/15213-f02\/L5\/handin$/;"	m
Inet_ntop	csapp.c	/^void Inet_ntop(int af, const void *src, char *dst, socklen_t size)$/;"	f
Inet_pton	csapp.c	/^void Inet_pton(int af, const char *src, void *dst) $/;"	f
Kill	csapp.c	/^void Kill(pid_t pid, int signum) $/;"	f
LDLIBS	Makefile	/^LDLIBS = csapp.c -lpthread$/;"	m
LISTENQ	csapp.h	61;"	d
Listen	csapp.c	/^void Listen(int s, int backlog) $/;"	f
Lseek	csapp.c	/^off_t Lseek(int fildes, off_t offset, int whence) $/;"	f
MAXARGS	tsh.c	21;"	d	file:
MAXBUF	csapp.h	60;"	d
MAXJID	tsh.c	23;"	d	file:
MAXJOBS	tsh.c	22;"	d	file:
MAXLINE	csapp.h	59;"	d
MAXLINE	tsh.c	19;"	d	file:
Malloc	csapp.c	/^void *Malloc(size_t size) $/;"	f
Mmap	csapp.c	/^void *Mmap(void *addr, size_t len, int prot, int flags, int fd, off_t offset) $/;"	f
Munmap	csapp.c	/^void Munmap(void *start, size_t length) $/;"	f
Open	csapp.c	/^int Open(const char *pathname, int flags, mode_t mode) $/;"	f
Open_clientfd	csapp.c	/^int Open_clientfd(char *hostname, char *port) $/;"	f
Open_listenfd	csapp.c	/^int Open_listenfd(char *port) $/;"	f
Opendir	csapp.c	/^DIR *Opendir(const char *name) $/;"	f
P	csapp.c	/^void P(sem_t *sem) $/;"	f
Pause	csapp.c	/^void Pause() $/;"	f
Pthread_cancel	csapp.c	/^void Pthread_cancel(pthread_t tid) {$/;"	f
Pthread_create	csapp.c	/^void Pthread_create(pthread_t *tidp, pthread_attr_t *attrp, $/;"	f
Pthread_detach	csapp.c	/^void Pthread_detach(pthread_t tid) {$/;"	f
Pthread_exit	csapp.c	/^void Pthread_exit(void *retval) {$/;"	f
Pthread_join	csapp.c	/^void Pthread_join(pthread_t tid, void **thread_return) {$/;"	f
Pthread_once	csapp.c	/^void Pthread_once(pthread_once_t *once_control, void (*init_function)()) {$/;"	f
Pthread_self	csapp.c	/^pthread_t Pthread_self(void) {$/;"	f
RIO_BUFSIZE	csapp.h	45;"	d
Read	csapp.c	/^ssize_t Read(int fd, void *buf, size_t count) $/;"	f
Readdir	csapp.c	/^struct dirent *Readdir(DIR *dirp)$/;"	f
Realloc	csapp.c	/^void *Realloc(void *ptr, size_t size) $/;"	f
Rio_readinitb	csapp.c	/^void Rio_readinitb(rio_t *rp, int fd)$/;"	f
Rio_readlineb	csapp.c	/^ssize_t Rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
Rio_readn	csapp.c	/^ssize_t Rio_readn(int fd, void *ptr, size_t nbytes) $/;"	f
Rio_readnb	csapp.c	/^ssize_t Rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
Rio_writen	csapp.c	/^void Rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
SA	csapp.h	/^typedef struct sockaddr SA;$/;"	t	typeref:struct:sockaddr
ST	tsh.c	29;"	d	file:
Select	csapp.c	/^int Select(int  n, fd_set *readfds, fd_set *writefds,$/;"	f
Sem_init	csapp.c	/^void Sem_init(sem_t *sem, int pshared, unsigned int value) $/;"	f
Setpgid	csapp.c	/^void Setpgid(pid_t pid, pid_t pgid) {$/;"	f
Setsockopt	csapp.c	/^void Setsockopt(int s, int level, int optname, const void *optval, int optlen) $/;"	f
Sigaddset	csapp.c	/^void Sigaddset(sigset_t *set, int signum)$/;"	f
Sigdelset	csapp.c	/^void Sigdelset(sigset_t *set, int signum)$/;"	f
Sigemptyset	csapp.c	/^void Sigemptyset(sigset_t *set)$/;"	f
Sigfillset	csapp.c	/^void Sigfillset(sigset_t *set)$/;"	f
Sigismember	csapp.c	/^int Sigismember(const sigset_t *set, int signum)$/;"	f
Signal	csapp.c	/^handler_t *Signal(int signum, handler_t *handler) $/;"	f
Sigprocmask	csapp.c	/^void Sigprocmask(int how, const sigset_t *set, sigset_t *oldset)$/;"	f
Sigsuspend	csapp.c	/^int Sigsuspend(const sigset_t *set)$/;"	f
Sio_error	csapp.c	/^void Sio_error(char s[])$/;"	f
Sio_putl	csapp.c	/^ssize_t Sio_putl(long v)$/;"	f
Sio_puts	csapp.c	/^ssize_t Sio_puts(char s[])$/;"	f
Sleep	csapp.c	/^unsigned int Sleep(unsigned int secs) $/;"	f
Socket	csapp.c	/^int Socket(int domain, int type, int protocol) $/;"	f
Stat	csapp.c	/^void Stat(const char *filename, struct stat *buf) $/;"	f
TEAM	Makefile	/^TEAM = NOBODY$/;"	m
TSH	Makefile	/^TSH = .\/tsh$/;"	m
TSHARGS	Makefile	/^TSHARGS = "-p"$/;"	m
TSHREF	Makefile	/^TSHREF = .\/tshref$/;"	m
UNDEF	tsh.c	26;"	d	file:
V	csapp.c	/^void V(sem_t *sem) $/;"	f
VERSION	Makefile	/^VERSION = 1$/;"	m
Wait	csapp.c	/^pid_t Wait(int *status) $/;"	f
Waitpid	csapp.c	/^pid_t Waitpid(pid_t pid, int *iptr, int options) $/;"	f
Write	csapp.c	/^ssize_t Write(int fd, const void *buf, size_t count) $/;"	f
__CSAPP_H__	csapp.h	6;"	d
addjob	tsh.c	/^int addjob(struct job_t *jobs, pid_t pid, int state, char *cmdline) $/;"	f
app_error	csapp.c	/^void app_error(char *msg) \/* Application error *\/$/;"	f
builtin_cmd	tsh.c	/^int builtin_cmd(char **argv) $/;"	f
clearjob	tsh.c	/^void clearjob(struct job_t *job) {$/;"	f
cmdline	tsh.c	/^    char cmdline[MAXLINE];  \/* command line *\/$/;"	m	struct:job_t	file:
deletejob	tsh.c	/^int deletejob(struct job_t *jobs, pid_t pid) $/;"	f
dns_error	csapp.c	/^void dns_error(char *msg) \/* Obsolete gethostbyname error *\/$/;"	f
do_bgfg	tsh.c	/^void do_bgfg(char **argv) $/;"	f
eval	tsh.c	/^void eval(char *cmdline) {$/;"	f
fgpid	tsh.c	/^pid_t fgpid(struct job_t *jobs) {$/;"	f
gai_error	csapp.c	/^void gai_error(int code, char *msg) \/* Getaddrinfo-style error *\/$/;"	f
getjobjid	tsh.c	/^struct job_t *getjobjid(struct job_t *jobs, int jid) $/;"	f
getjobpid	tsh.c	/^struct job_t *getjobpid(struct job_t *jobs, pid_t pid) {$/;"	f
handler_t	csapp.h	/^typedef void handler_t(int);$/;"	t
handler_t	tsh.c	/^typedef void handler_t(int);$/;"	t	file:
initjobs	tsh.c	/^void initjobs(struct job_t *jobs) {$/;"	f
jid	tsh.c	/^    int jid;                \/* job ID [1, 2, ...] *\/$/;"	m	struct:job_t	file:
job_t	tsh.c	/^struct job_t {              \/* The job struct *\/$/;"	s	file:
jobs	tsh.c	/^struct job_t jobs[MAXJOBS]; \/* The job list *\/$/;"	v	typeref:struct:job_t
listjobs	tsh.c	/^void listjobs(struct job_t *jobs) $/;"	f
main	myint.c	/^int main(int argc, char **argv) $/;"	f
main	myspin.c	/^int main(int argc, char **argv) $/;"	f
main	mysplit.c	/^int main(int argc, char **argv) $/;"	f
main	mystop.c	/^int main(int argc, char **argv) $/;"	f
main	tsh.c	/^int main(int argc, char **argv) {$/;"	f
maxjid	tsh.c	/^int maxjid(struct job_t *jobs) $/;"	f
nextjid	tsh.c	/^int nextjid = 1;            \/* next job ID to allocate *\/$/;"	v
open_clientfd	csapp.c	/^int open_clientfd(char *hostname, char *port) {$/;"	f
open_listenfd	csapp.c	/^int open_listenfd(char *port) $/;"	f
parseline	tsh.c	/^int parseline(const char *cmdline, char **argv) {$/;"	f
pid	tsh.c	/^    pid_t pid;              \/* job PID *\/$/;"	m	struct:job_t	file:
pid2jid	tsh.c	/^int pid2jid(pid_t pid) $/;"	f
posix_error	csapp.c	/^void posix_error(int code, char *msg) \/* Posix-style error *\/$/;"	f
prompt	tsh.c	/^char prompt[] = "tsh> ";    \/* command line prompt (DO NOT CHANGE) *\/$/;"	v
rio_buf	csapp.h	/^    char rio_buf[RIO_BUFSIZE]; \/* Internal buffer *\/$/;"	m	struct:__anon1
rio_bufptr	csapp.h	/^    char *rio_bufptr;          \/* Next unread byte in internal buf *\/$/;"	m	struct:__anon1
rio_cnt	csapp.h	/^    int rio_cnt;               \/* Unread bytes in internal buf *\/$/;"	m	struct:__anon1
rio_fd	csapp.h	/^    int rio_fd;                \/* Descriptor for this internal buf *\/$/;"	m	struct:__anon1
rio_read	csapp.c	/^static ssize_t rio_read(rio_t *rp, char *usrbuf, size_t n)$/;"	f	file:
rio_readinitb	csapp.c	/^void rio_readinitb(rio_t *rp, int fd) $/;"	f
rio_readlineb	csapp.c	/^ssize_t rio_readlineb(rio_t *rp, void *usrbuf, size_t maxlen) $/;"	f
rio_readn	csapp.c	/^ssize_t rio_readn(int fd, void *usrbuf, size_t n) $/;"	f
rio_readnb	csapp.c	/^ssize_t rio_readnb(rio_t *rp, void *usrbuf, size_t n) $/;"	f
rio_t	csapp.h	/^} rio_t;$/;"	t	typeref:struct:__anon1
rio_writen	csapp.c	/^ssize_t rio_writen(int fd, void *usrbuf, size_t n) $/;"	f
sbuf	tsh.c	/^char sbuf[MAXLINE];         \/* for composing sprintf messages *\/$/;"	v
sigchld_handler	tsh.c	/^void sigchld_handler(int sig) $/;"	f
sigint_handler	tsh.c	/^void sigint_handler(int sig) $/;"	f
sigquit_handler	tsh.c	/^void sigquit_handler(int sig) $/;"	f
sigtstp_handler	tsh.c	/^void sigtstp_handler(int sig) $/;"	f
sio_error	csapp.c	/^void sio_error(char s[]) \/* Put error message and exit *\/$/;"	f
sio_ltoa	csapp.c	/^static void sio_ltoa(long v, char s[], int b) $/;"	f	file:
sio_putl	csapp.c	/^ssize_t sio_putl(long v) \/* Put long *\/$/;"	f
sio_puts	csapp.c	/^ssize_t sio_puts(char s[]) \/* Put string *\/$/;"	f
sio_reverse	csapp.c	/^static void sio_reverse(char s[])$/;"	f	file:
sio_strlen	csapp.c	/^static size_t sio_strlen(char s[])$/;"	f	file:
state	tsh.c	/^    int state;              \/* UNDEF, BG, FG, or ST *\/$/;"	m	struct:job_t	file:
unix_error	csapp.c	/^void unix_error(char *msg) \/* Unix-style error *\/$/;"	f
usage	sdriver.pl	/^sub usage $/;"	s
usage	tsh.c	/^void usage(void) $/;"	f
verbose	tsh.c	/^int verbose = 0;            \/* if true, print additional output *\/$/;"	v
waitfg	tsh.c	/^void waitfg(pid_t pid)$/;"	f
